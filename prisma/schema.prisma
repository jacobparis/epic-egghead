// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Collection {
  id        String               @id @default(cuid())
  name      String
  type      String
  resources CollectionResource[]
  sections  CollectionSection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model CollectionResource {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  @@id([collectionId, resourceId])
}

model CollectionSection {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String

  @@id([collectionId, sectionId])
}

model Section {
  id          String              @id @default(cuid())
  name        String
  type        String
  resources   SectionResource[]
  collections CollectionSection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model SectionResource {
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  @@id([sectionId, resourceId])
}

model Resource {
  id          String               @id @default(cuid())
  collections CollectionResource[]
  sections    SectionResource[]
  type        String

  muxVideoResourceId String?           @map("muxVideoResource")
  muxVideoResource   MuxVideoResource? @relation(fields: [muxVideoResourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([muxVideoResourceId])
}

model MuxVideoResource {
  id            String @id @default(cuid())
  muxPlaybackId String
  muxAssetId    String @unique

  resource Resource?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id            Int      @id
  slug          String
  source_url    String?
  subtitles_url String?
  size          Int?
  mux_asset_id  String?
  state         String   @default("unprocessed")
  lessons       Lesson[]
}

// Represents the 'tags' table
model Tag {
  id        Int     @id
  slug      String
  image_url String?
  body      String?
}

// Represents the 'instructors' table
model Instructor {
  id         Int      @id
  full_name  String?
  slug       String
  avatar_url String?
  courses    Course[]
  lessons    Lesson[]
}

// Represents the 'lessons' table
model Lesson {
  id            Int     @id
  video_id      Int
  instructor_id Int
  slug          String
  state         String  @default("draft")
  course_id     Int?
  title         String
  body          String?

  video      Video      @relation(fields: [video_id], references: [id])
  instructor Instructor @relation(fields: [instructor_id], references: [id])
  course     Course?    @relation(fields: [course_id], references: [id])
}

// Represents the 'courses' table
model Course {
  id            Int     @id
  slug          String
  image_url     String?
  instructor_id Int?
  state         String  @default("draft")
  access_state  String  @default("indexed")
  body          String?
  title         String

  instructor Instructor? @relation(fields: [instructor_id], references: [id])
  lessons    Lesson[]
}
